crystal_doc_search_index_callback({"repository_name":"github.com/woodruffw/pgp-wordlist.cr","body":"pgp-wordlist.cr\n===============\n\n![license](https://raster.shields.io/badge/license-MIT%20with%20restrictions-green.png)\n[![Build Status](https://img.shields.io/github/workflow/status/woodruffw/pgp-wordlist.cr/CI/master)](https://github.com/woodruffw/pgp-wordlist.cr/actions?query=workflow%3ACI)\n\nA simple library for converting sequences of bytes into unambiguous English words.\n\nUses the \"official\" word list: <https://philzimmermann.com/docs/PGP_word_list.pdf>\n\n## Installation\n\nAdd this to your application's `shard.yml`:\n\n```yaml\ndependencies:\n  pgp-wordlist:\n    github: woodruffw/pgp-wordlist.cr\n```\n\n## Usage\n\n```crystal\nrequire \"pgp-wordlist\"\n\nPGP::Wordlist.from_hexstring \"0123 cdef\" # => \"absurd cannonball spindle unravel\"\n\nbytes = [0xfe_u8, 0xed_u8, 0xfa_u8, 0xce_u8]\nPGP::Wordlist.from_bytes bytes # => \"woodlark unify wallet sardonic\"\n```\n\n## Contributing\n\n1. Fork it (<https://github.com/woodruffw/pgp-wordlist.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [woodruffw](https://github.com/woodruffw) William Woodruff - creator, maintainer\n","program":{"html_id":"github.com/woodruffw/pgp-wordlist.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/woodruffw/pgp-wordlist.cr","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/woodruffw/pgp-wordlist.cr/PGP","path":"PGP.html","kind":"module","full_name":"PGP","name":"PGP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"pgp-wordlist/version.cr","line_number":1,"url":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist/version.cr"}],"repository_name":"github.com/woodruffw/pgp-wordlist.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/woodruffw/pgp-wordlist.cr/PGP/Wordlist","path":"PGP/Wordlist.html","kind":"module","full_name":"PGP::Wordlist","name":"Wordlist","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"pgp-wordlist/version.cr","line_number":1,"url":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist/version.cr"},{"filename":"pgp-wordlist.cr","line_number":15,"url":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist.cr"}],"repository_name":"github.com/woodruffw/pgp-wordlist.cr","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null},{"id":"WORD_LIST","name":"WORD_LIST","value":"[[\"aardvark\", \"adroitness\"], [\"absurd\", \"adviser\"], [\"accrue\", \"aftermath\"], [\"acme\", \"aggregate\"], [\"adrift\", \"alkali\"], [\"adult\", \"almighty\"], [\"afflict\", \"amulet\"], [\"ahead\", \"amusement\"], [\"aimless\", \"antenna\"], [\"Algol\", \"applicant\"], [\"allow\", \"Apollo\"], [\"alone\", \"armistice\"], [\"ammo\", \"article\"], [\"ancient\", \"asteroid\"], [\"apple\", \"Atlantic\"], [\"artist\", \"atmosphere\"], [\"assume\", \"autopsy\"], [\"Athens\", \"Babylon\"], [\"atlas\", \"backwater\"], [\"Aztec\", \"barbecue\"], [\"baboon\", \"belowground\"], [\"backfield\", \"bifocals\"], [\"backward\", \"bodyguard\"], [\"banjo\", \"bookseller\"], [\"beaming\", \"borderline\"], [\"bedlamp\", \"bottomless\"], [\"beehive\", \"Bradbury\"], [\"beeswax\", \"bravado\"], [\"befriend\", \"Brazilian\"], [\"Belfast\", \"breakaway\"], [\"berserk\", \"Burlington\"], [\"billiard\", \"businessman\"], [\"bison\", \"butterfat\"], [\"blackjack\", \"Camelot\"], [\"blockade\", \"candidate\"], [\"blowtorch\", \"cannonball\"], [\"bluebird\", \"Capricorn\"], [\"bombast\", \"caravan\"], [\"bookshelf\", \"caretaker\"], [\"brackish\", \"celebrate\"], [\"breadline\", \"cellulose\"], [\"breakup\", \"certify\"], [\"brickyard\", \"chambermaid\"], [\"briefcase\", \"Cherokee\"], [\"Burbank\", \"Chicago\"], [\"button\", \"clergyman\"], [\"buzzard\", \"coherence\"], [\"cement\", \"combustion\"], [\"chairlift\", \"commando\"], [\"chatter\", \"company\"], [\"checkup\", \"component\"], [\"chisel\", \"concurrent\"], [\"choking\", \"confidence\"], [\"chopper\", \"conformist\"], [\"Christmas\", \"congregate\"], [\"clamshell\", \"consensus\"], [\"classic\", \"consulting\"], [\"classroom\", \"corporate\"], [\"cleanup\", \"corrosion\"], [\"clockwork\", \"councilman\"], [\"cobra\", \"crossover\"], [\"commence\", \"crucifix\"], [\"concert\", \"cumbersome\"], [\"cowbell\", \"customer\"], [\"crackdown\", \"Dakota\"], [\"cranky\", \"decadence\"], [\"crowfoot\", \"December\"], [\"crucial\", \"decimal\"], [\"crumpled\", \"designing\"], [\"crusade\", \"detector\"], [\"cubic\", \"detergent\"], [\"dashboard\", \"determine\"], [\"deadbolt\", \"dictator\"], [\"deckhand\", \"dinosaur\"], [\"dogsled\", \"direction\"], [\"dragnet\", \"disable\"], [\"drainage\", \"disbelief\"], [\"dreadful\", \"disruptive\"], [\"drifter\", \"distortion\"], [\"dropper\", \"document\"], [\"drumbeat\", \"embezzle\"], [\"drunken\", \"enchanting\"], [\"Dupont\", \"enrollment\"], [\"dwelling\", \"enterprise\"], [\"eating\", \"equation\"], [\"edict\", \"equipment\"], [\"egghead\", \"escapade\"], [\"eightball\", \"Eskimo\"], [\"endorse\", \"everyday\"], [\"endow\", \"examine\"], [\"enlist\", \"existence\"], [\"erase\", \"exodus\"], [\"escape\", \"fascinate\"], [\"exceed\", \"filament\"], [\"eyeglass\", \"finicky\"], [\"eyetooth\", \"forever\"], [\"facial\", \"fortitude\"], [\"fallout\", \"frequency\"], [\"flagpole\", \"gadgetry\"], [\"flatfoot\", \"Galveston\"], [\"flytrap\", \"getaway\"], [\"fracture\", \"glossary\"], [\"framework\", \"gossamer\"], [\"freedom\", \"graduate\"], [\"frighten\", \"gravity\"], [\"gazelle\", \"guitarist\"], [\"Geiger\", \"hamburger\"], [\"glitter\", \"Hamilton\"], [\"glucose\", \"handiwork\"], [\"goggles\", \"hazardous\"], [\"goldfish\", \"headwaters\"], [\"gremlin\", \"hemisphere\"], [\"guidance\", \"hesitate\"], [\"hamlet\", \"hideaway\"], [\"highchair\", \"holiness\"], [\"hockey\", \"hurricane\"], [\"indoors\", \"hydraulic\"], [\"indulge\", \"impartial\"], [\"inverse\", \"impetus\"], [\"involve\", \"inception\"], [\"island\", \"indigo\"], [\"jawbone\", \"inertia\"], [\"keyboard\", \"infancy\"], [\"kickoff\", \"inferno\"], [\"kiwi\", \"informant\"], [\"klaxon\", \"insincere\"], [\"locale\", \"insurgent\"], [\"lockup\", \"integrate\"], [\"merit\", \"intention\"], [\"minnow\", \"inventive\"], [\"miser\", \"Istanbul\"], [\"Mohawk\", \"Jamaica\"], [\"mural\", \"Jupiter\"], [\"music\", \"leprosy\"], [\"necklace\", \"letterhead\"], [\"Neptune\", \"liberty\"], [\"newborn\", \"maritime\"], [\"nightbird\", \"matchmaker\"], [\"Oakland\", \"maverick\"], [\"obtuse\", \"Medusa\"], [\"offload\", \"megaton\"], [\"optic\", \"microscope\"], [\"orca\", \"microwave\"], [\"payday\", \"midsummer\"], [\"peachy\", \"millionaire\"], [\"pheasant\", \"miracle\"], [\"physique\", \"misnomer\"], [\"playhouse\", \"molasses\"], [\"Pluto\", \"molecule\"], [\"preclude\", \"Montana\"], [\"prefer\", \"monument\"], [\"preshrunk\", \"mosquito\"], [\"printer\", \"narrative\"], [\"prowler\", \"nebula\"], [\"pupil\", \"newsletter\"], [\"puppy\", \"Norwegian\"], [\"python\", \"October\"], [\"quadrant\", \"Ohio\"], [\"quiver\", \"onlooker\"], [\"quota\", \"opulent\"], [\"ragtime\", \"Orlando\"], [\"ratchet\", \"outfielder\"], [\"rebirth\", \"Pacific\"], [\"reform\", \"pandemic\"], [\"regain\", \"Pandora\"], [\"reindeer\", \"paperweight\"], [\"rematch\", \"paragon\"], [\"repay\", \"paragraph\"], [\"retouch\", \"paramount\"], [\"revenge\", \"passenger\"], [\"reward\", \"pedigree\"], [\"rhythm\", \"Pegasus\"], [\"ribcage\", \"penetrate\"], [\"ringbolt\", \"perceptive\"], [\"robust\", \"performance\"], [\"rocker\", \"pharmacy\"], [\"ruffled\", \"phonetic\"], [\"sailboat\", \"photograph\"], [\"sawdust\", \"pioneer\"], [\"scallion\", \"pocketful\"], [\"scenic\", \"politeness\"], [\"scorecard\", \"positive\"], [\"Scotland\", \"potato\"], [\"seabird\", \"processor\"], [\"select\", \"provincial\"], [\"sentence\", \"proximate\"], [\"shadow\", \"puberty\"], [\"shamrock\", \"publisher\"], [\"showgirl\", \"pyramid\"], [\"skullcap\", \"quantity\"], [\"skydive\", \"racketeer\"], [\"slingshot\", \"rebellion\"], [\"slowdown\", \"recipe\"], [\"snapline\", \"recover\"], [\"snapshot\", \"repellent\"], [\"snowcap\", \"replica\"], [\"snowslide\", \"reproduce\"], [\"solo\", \"resistor\"], [\"southward\", \"responsive\"], [\"soybean\", \"retraction\"], [\"spaniel\", \"retrieval\"], [\"spearhead\", \"retrospect\"], [\"spellbind\", \"revenue\"], [\"spheroid\", \"revival\"], [\"spigot\", \"revolver\"], [\"spindle\", \"sandalwood\"], [\"spyglass\", \"sardonic\"], [\"stagehand\", \"Saturday\"], [\"stagnate\", \"savagery\"], [\"stairway\", \"scavenger\"], [\"standard\", \"sensation\"], [\"stapler\", \"sociable\"], [\"steamship\", \"souvenir\"], [\"sterling\", \"specialist\"], [\"stockman\", \"speculate\"], [\"stopwatch\", \"stethoscope\"], [\"stormy\", \"stupendous\"], [\"sugar\", \"supportive\"], [\"surmount\", \"surrender\"], [\"suspense\", \"suspicious\"], [\"sweatband\", \"sympathy\"], [\"swelter\", \"tambourine\"], [\"tactics\", \"telephone\"], [\"talon\", \"therapist\"], [\"tapeworm\", \"tobacco\"], [\"tempest\", \"tolerance\"], [\"tiger\", \"tomorrow\"], [\"tissue\", \"torpedo\"], [\"tonic\", \"tradition\"], [\"topmost\", \"travesty\"], [\"tracker\", \"trombonist\"], [\"transit\", \"truncated\"], [\"trauma\", \"typewriter\"], [\"treadmill\", \"ultimate\"], [\"Trojan\", \"undaunted\"], [\"trouble\", \"underfoot\"], [\"tumor\", \"unicorn\"], [\"tunnel\", \"unify\"], [\"tycoon\", \"universe\"], [\"uncut\", \"unravel\"], [\"unearth\", \"upcoming\"], [\"unwind\", \"vacancy\"], [\"uproot\", \"vagabond\"], [\"upset\", \"vertigo\"], [\"upshot\", \"Virginia\"], [\"vapor\", \"visitor\"], [\"village\", \"vocalist\"], [\"virus\", \"voyager\"], [\"Vulcan\", \"warranty\"], [\"waffle\", \"Waterloo\"], [\"wallet\", \"whimsical\"], [\"watchword\", \"Wichita\"], [\"wayside\", \"Wilmington\"], [\"willow\", \"Wyoming\"], [\"woodlark\", \"yesteryear\"], [\"Zulu\", \"Yucatan\"]]","doc":"The list of (even, odd) words for each byte.","summary":"<p>The list of (even, odd) words for each byte.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"github.com/woodruffw/pgp-wordlist.cr/PGP","kind":"module","full_name":"PGP","name":"PGP"},"doc":"A simple library for converting sequences of bytes into unambiguous English words.\n\nUses the \"official\" word list: https://philzimmermann.com/docs/PGP_word_list.pdf\n\n```\nrequire \"pgp-wordlist\"\n\nPGP::Wordlist.from_hexstring \"0123 cdef\" # => \"absurd cannonball spindle unravel\"\n\nbytes = [0xfe_u8, 0xed_u8, 0xfa_u8, 0xce_u8]\nPGP::Wordlist.from_bytes bytes # => \"woodlark unify wallet sardonic\"\n```","summary":"<p>A simple library for converting sequences of bytes into unambiguous English words.</p>","class_methods":[{"id":"each_word(bytes:Enumerable(UInt8),&)-class-method","html_id":"each_word(bytes:Enumerable(UInt8),&amp;)-class-method","name":"each_word","doc":"Yields the English word corresponding to each byte in *bytes*.\n\n```\nPGP::Wordlist.each_word(\"hello\".to_slice) do |word|\n  puts word\nend\n```","summary":"<p>Yields the English word corresponding to each byte in <em>bytes</em>.</p>","abstract":false,"args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Enumerable(UInt8)"}],"args_string":"(bytes : Enumerable(UInt8), &)","source_link":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist.cr#L315","def":{"name":"each_word","args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Enumerable(UInt8)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"bytes.each_with_index do |byte, i|\n  yield WORD_LIST[byte][i % 2]\nend"}},{"id":"each_word(string:String,&)-class-method","html_id":"each_word(string:String,&amp;)-class-method","name":"each_word","doc":"Yields the English word corresponding to each hex byte in *string*.\n\n```\nPGP::Wordlist.each_word(\"feed face\") do |word|\n  puts word\nend\n```\n\nNOTE: The difference between this and `.each_word(bytes)` is that this parses hexadecimal digits:\n`\"01\"` becomes `0x01`, not `[0x30, 0x31]`.","summary":"<p>Yields the English word corresponding to each hex byte in <em>string</em>.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"args_string":"(string : String, &)","source_link":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist.cr#L331","def":{"name":"each_word","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"string = string.delete(&.whitespace?)\neach_word(string.hexbytes) do |word|\n  yield word\nend\n"}},{"id":"from_bytes(bytes:Enumerable(UInt8))-class-method","html_id":"from_bytes(bytes:Enumerable(UInt8))-class-method","name":"from_bytes","doc":"Returns an English word string corresponding to the given enumerable of *bytes*.\n\n```\nPGP::Wordlist.from_bytes \"hello\".to_slice\nPGP::Wordlist.from_bytes [1_u8, 2_u8, 3_u8]\n```","summary":"<p>Returns an English word string corresponding to the given enumerable of <em>bytes</em>.</p>","abstract":false,"args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Enumerable(UInt8)"}],"args_string":"(bytes : Enumerable(UInt8))","source_link":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist.cr#L297","def":{"name":"from_bytes","args":[{"name":"bytes","doc":null,"default_value":"","external_name":"bytes","restriction":"Enumerable(UInt8)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build(8 * bytes.size) do |str|\n  bytes.each_with_index do |byte, i|\n    str << WORD_LIST[byte][i % 2]\n    if i == (bytes.size - 1)\n    else\n      str << \" \"\n    end\n  end\nend"}},{"id":"from_hexstring(string)-class-method","html_id":"from_hexstring(string)-class-method","name":"from_hexstring","doc":"Returns an English word string corresponding to the given hex bytes in *string*.\n\nAll whitespace is stripped from the string before processing.\n\n```\nPGP::Wordlist.from_hexstring <<-MESSAGE\n E582 94F2 E9A2 2748 6E8B\n 061B 31CC 528F D7FA 3F19\nMESSAGE\n```","summary":"<p>Returns an English word string corresponding to the given hex bytes in <em>string</em>.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"args_string":"(string)","source_link":"https://github.com/woodruffw/pgp-wordlist.cr/blob/51a13fa33702d29d3b8e606d7eb80b396ea06f07/src/pgp-wordlist.cr#L286","def":{"name":"from_hexstring","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"string = string.delete(&.whitespace?)\nfrom_bytes(string.hexbytes)\n"}}],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}})